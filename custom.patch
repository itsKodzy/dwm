--- ./dwm.c.bak	2025-07-01 03:50:32.731324809 +0300
+++ ./dwm.c	2025-07-01 03:50:32.731828015 +0300
@@ -161,6 +161,7 @@
   int by;             /* bar geometry */
   int mx, my, mw, mh; /* screen size */
   int wx, wy, ww, wh; /* window area  */
+  int gappx;          /* gaps between windows */
   unsigned int seltags;
   unsigned int sellt;
   unsigned int tagset[2];
@@ -277,6 +278,12 @@
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
 
+static void togglefullscreen(const Arg *arg);
+static void playerctl(const Arg *arg);
+static void debug_send_message(const DebugArg *arg);
+static void tile2(Monitor *m);
+static void fibonacci(Monitor *m);
+
 /* variables */
 static const char broken[] = "broken";
 static char stext[256];
@@ -663,6 +670,7 @@
   m->nmaster = nmaster;
   m->showbar = showbar;
   m->topbar = topbar;
+  m->gappx = gappx;
   m->lt[0] = &layouts[0];
   m->lt[1] = &layouts[1 % LENGTH(layouts)];
   strncpy(m->ltsymbol, layouts[0].symbol, sizeof m->ltsymbol);
@@ -725,7 +733,8 @@
     return;
 
   /* draw status first so it can be overdrawn by tags later */
-  if (m == selmon) { /* status is only drawn on selected monitor */
+  if (!0 || m == selmon) { /* status is only drawn on selected monitor FIX: on
+                              all monitors */
     drw_setscheme(drw, scheme[SchemeNorm]);
     tw = TEXTW(stext) - lrpad + 2; /* 2px right padding */
     drw_text(drw, m->ww - tw, 0, tw, bh, 0, stext, 0);
@@ -733,20 +742,22 @@
 
   for (c = m->clients; c; c = c->next) {
     occ |= c->tags;
-    if (c->isurgent)
-      urg |= c->tags;
+    // if (c->isurgent)
+    // 	urg |= c->tags;
   }
   x = 0;
   for (i = 0; i < LENGTH(tags); i++) {
-    w = TEXTW(tags[i]);
-    drw_setscheme(
-        drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-    drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-    if (occ & 1 << i)
-      drw_rect(drw, x + boxs, boxs, boxw, boxw,
-               m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
-               urg & 1 << i);
-    x += w;
+    if (m->tagset[m->seltags] & 1 << i || occ & 1 << i) {
+      w = TEXTW(tags[i]);
+      drw_setscheme(
+          drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
+      drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
+      if (occ & 1 << i)
+        drw_rect(drw, x + boxs, boxs, boxw, boxw,
+                 m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
+                 urg & 1 << i);
+      x += w;
+    }
   }
   w = TEXTW(m->ltsymbol);
   drw_setscheme(drw, scheme[SchemeNorm]);
@@ -1062,8 +1073,11 @@
   grabbuttons(c, 0);
   if (!c->isfloating)
     c->isfloating = c->oldstate = trans != None || c->isfixed;
-  if (c->isfloating)
+  if (c->isfloating) {
+    c->x = c->oldx = c->mon->mx + (c->mon->mw - c->w) / 2;
+    c->y = c->oldy = c->mon->my + (c->mon->mh - c->h) / 2;
     XRaiseWindow(dpy, c->win);
+  }
   attach(c);
   attachstack(c);
   XChangeProperty(dpy, root, netatom[NetClientList], XA_WINDOW, 32,
@@ -1134,6 +1148,7 @@
 
   if (!(c = selmon->sel))
     return;
+  int state = selmon->sel->isfloating + (selmon->sel->isfullscreen << 1);
   if (c->isfullscreen) /* no support moving fullscreen windows by mouse */
     return;
   restack(selmon);
@@ -1144,6 +1159,8 @@
     return;
   if (!getrootptr(&x, &y))
     return;
+  if (!c->isfloating)
+    togglefloating(NULL);
   do {
     XMaskEvent(dpy, MOUSEMASK | ExposureMask | SubstructureRedirectMask, &ev);
     switch (ev.type) {
@@ -1159,28 +1176,25 @@
 
       nx = ocx + (ev.xmotion.x - x);
       ny = ocy + (ev.xmotion.y - y);
-      if (abs(selmon->wx - nx) < snap)
-        nx = selmon->wx;
-      else if (abs((selmon->wx + selmon->ww) - (nx + WIDTH(c))) < snap)
-        nx = selmon->wx + selmon->ww - WIDTH(c);
-      if (abs(selmon->wy - ny) < snap)
-        ny = selmon->wy;
-      else if (abs((selmon->wy + selmon->wh) - (ny + HEIGHT(c))) < snap)
-        ny = selmon->wy + selmon->wh - HEIGHT(c);
-      if (!c->isfloating && selmon->lt[selmon->sellt]->arrange &&
-          (abs(nx - c->x) > snap || abs(ny - c->y) > snap))
-        togglefloating(NULL);
+
       if (!selmon->lt[selmon->sellt]->arrange || c->isfloating)
         resize(c, nx, ny, c->w, c->h, 1);
       break;
     }
   } while (ev.type != ButtonRelease);
+
   XUngrabPointer(dpy, CurrentTime);
-  if ((m = recttomon(c->x, c->y, c->w, c->h)) != selmon) {
+  if ((m = recttomon(ev.xbutton.x, ev.xbutton.y, 1, 1)) != selmon) {
     sendmon(c, m);
     selmon = m;
     focus(NULL);
   }
+  if ((state & 1) != c->isfloating) {
+    togglefloating(NULL);
+  }
+  if ((state << 1) & 1) {
+    setfullscreen(c, 1);
+  }
 }
 
 Client *nexttiled(Client *c) {
@@ -1618,6 +1632,57 @@
   }
 }
 
+void playerctl(const Arg *arg) {
+  if (arg->i == 1) {
+    system("playerctl play-pause");
+  } else if (arg->i == 2) {
+    system("playerctl next");
+  } else if (arg->i == 3) {
+    system("playerctl previous");
+  } else if (arg->i == 4) {
+    system("playerctl stop");
+  } else if (arg->i == 5) {
+    system("pactl set-sink-volume @DEFAULT_SINK@ +10%");
+  } else if (arg->i == 6) {
+    system("pactl set-sink-volume @DEFAULT_SINK@ -10%");
+  } else if (arg->i == 7) {
+    system("pactl set-sink-mute @DEFAULT_SINK@ toggle");
+  }
+
+  debug_send_message(
+      &(DebugArg){.type = DEBUG_TYPE_STRING, .data.s = "playerctl()"});
+}
+
+void debug_send_message(const DebugArg *arg) {
+  char message[256];
+
+  if (arg) {
+    switch (arg->type) {
+    case DEBUG_TYPE_STRING:
+      if (arg->data.s) {
+        snprintf(message, sizeof(message), "notify-send '%s'", arg->data.s);
+      } else {
+        snprintf(message, sizeof(message), "notify-send 'null string'");
+      }
+      break;
+    case DEBUG_TYPE_NUMBER:
+      snprintf(message, sizeof(message), "notify-send '%d'", arg->data.i);
+      break;
+    case DEBUG_TYPE_UNSIGNED:
+      snprintf(message, sizeof(message), "notify-send '%u'", arg->data.u);
+      break;
+    case DEBUG_TYPE_FLOAT:
+      snprintf(message, sizeof(message), "notify-send '%.2f'", arg->data.f);
+      break;
+    default:
+      snprintf(message, sizeof(message), "notify-send 'unknown type'");
+      break;
+    }
+    // Send the message, e.g., using system(message);
+    system(message);
+  }
+}
+
 void tag(const Arg *arg) {
   if (selmon->sel && arg->ui & TAGMASK) {
     selmon->sel->tags = arg->ui & TAGMASK;
@@ -1661,6 +1726,90 @@
     }
 }
 
+void tile2(Monitor *m) {
+  int x, y;
+  unsigned int i, n, h, mw, my, ty;
+  my = ty = m->gappx;
+  Client *c;
+
+  if (!getrootptr(&x, &y))
+    fibonacci(m);
+
+  for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++)
+    ;
+  if (n == 0)
+    return;
+
+  mw = m->ww - m->gappx;
+  for (i = 0, my = ty = m->gappx, c = nexttiled(m->clients); c;
+       c = nexttiled(c->next), i++) {
+    h = (m->wh - ty) / (n - i) - m->gappx;
+    resize(c, m->wx + mw + m->gappx, m->wy + ty,
+           m->ww - mw - (2 * c->bw) - 2 * m->gappx, h - (2 * c->bw), 0);
+    if (ty + HEIGHT(c) + m->gappx < m->wh)
+      ty += HEIGHT(c) + m->gappx;
+  }
+}
+
+void fibonacci(Monitor *m) {
+  int s = 0;
+  unsigned int i, n, nx, ny, nw, nh;
+  Client *c;
+
+  for (n = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next), n++)
+    ;
+  if (n == 0)
+    return;
+
+  nx = m->wx;
+  ny = 0;
+  nw = m->ww;
+  nh = m->wh;
+
+  if (m->showbar)
+    nh -= bargapy;
+
+  for (i = 0, c = nexttiled(m->clients); c; c = nexttiled(c->next)) {
+    if ((i % 2 && nh / 2 > 2 * c->bw) || (!(i % 2) && nw / 2 > 2 * c->bw)) {
+      if (i < n - 1) {
+        if (i % 2)
+          nh /= 2;
+        else
+          nw /= 2;
+        if ((i % 4) == 2 && !s)
+          nx += nw;
+        else if ((i % 4) == 3 && !s)
+          ny += nh;
+      }
+      if ((i % 4) == 0) {
+        if (s)
+          ny += nh;
+        else
+          ny -= nh;
+      } else if ((i % 4) == 1)
+        nx += nw;
+      else if ((i % 4) == 2)
+        ny += nh;
+      else if ((i % 4) == 3) {
+        if (s)
+          nx += nw;
+        else
+          nx -= nw;
+      }
+      if (i == 0) {
+        if (n != 1)
+          nw = m->ww * m->mfact;
+        ny = m->wy;
+      } else if (i == 1)
+        nw = m->ww - nw;
+      i++;
+    }
+
+    resize(c, nx + m->gappx, ny + m->gappx, nw - 2 * c->bw - m->gappx * 2,
+           nh - m->gappx * 2, False);
+  }
+}
+
 void togglebar(const Arg *arg) {
   selmon->showbar = !selmon->showbar;
   updatebarpos(selmon);
@@ -1681,6 +1830,12 @@
   arrange(selmon);
 }
 
+void togglefullscreen(const Arg *arg) {
+  if (!selmon->sel)
+    return;
+  setfullscreen(selmon->sel, !selmon->sel->isfullscreen);
+}
+
 void toggletag(const Arg *arg) {
   unsigned int newtags;
 
@@ -1735,9 +1890,9 @@
     XUngrabServer(dpy);
   }
   free(c);
+  arrange(m);
   focus(NULL);
   updateclientlist();
-  arrange(m);
 }
 
 void unmapnotify(XEvent *e) {
@@ -1907,14 +2062,19 @@
   if (size.flags & PMaxSize) {
     c->maxw = size.max_width;
     c->maxh = size.max_height;
+    c->isfloating = c->isfloating || (c->maxw < c->mon->mw - (gappx * 2));
   } else
     c->maxw = c->maxh = 0;
   if (size.flags & PMinSize) {
-    c->minw = size.min_width;
-    c->minh = size.min_height;
+    c->minw = 1;
+    c->minh = 1;
+    // c->minw = size.min_width;
+    // c->minh = size.min_height;
   } else if (size.flags & PBaseSize) {
-    c->minw = size.base_width;
-    c->minh = size.base_height;
+    c->minw = 1;
+    c->minh = 1;
+    // c->minw = size.base_width;
+    // c->minh = size.base_height;
   } else
     c->minw = c->minh = 0;
   if (size.flags & PAspect) {
@@ -1928,8 +2088,9 @@
 
 void updatestatus(void) {
   if (!gettextprop(root, XA_WM_NAME, stext, sizeof(stext)))
-    strcpy(stext, "dwm-" VERSION);
-  drawbar(selmon);
+    strcpy(stext, "dwm");
+  for (Monitor *m = mons; m; m = m->next)
+    drawbar(m);
 }
 
 void updatetitle(Client *c) {
@@ -2043,7 +2204,7 @@
 
 int main(int argc, char *argv[]) {
   if (argc == 2 && !strcmp("-v", argv[1]))
-    die("dwm-" VERSION);
+    die("dwm");
   else if (argc != 1)
     die("usage: dwm [-v]");
   if (!setlocale(LC_CTYPE, "") || !XSupportsLocale())
